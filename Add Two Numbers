You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

--------------------------------Solution----------------------------//nabajyoti majumdar
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head=new ListNode(0);
        ListNode* k=head;
        ListNode* i=l1;
        ListNode* j=l2;
        int carryover=0;
        int data;
        while(i!=NULL && j!=NULL){
            data=i->val+j->val+carryover;
            carryover=data/10;
            data=data%10;
            ListNode* temp=new ListNode(data);
            k->next=temp;
            k=temp;
            i=i->next;
            j=j->next;
        }
        
        while(i!=NULL){
            data=i->val+carryover;
            carryover=data/10;
            data=data%10;
            ListNode* temp=new ListNode(data);
            k->next=temp;
            k=temp;
            i=i->next;
        }
        
        while(j!=NULL){
            data=j->val+carryover;
            carryover=data/10;
            data=data%10;
            ListNode* temp=new ListNode(data);
            k->next=temp;
            k=temp;
            j=j->next;
        }
        
        while(carryover!=0){
            data=carryover;
            carryover=carryover/10;
            data=data%10;
            ListNode* temp=new ListNode(data);
            k->next=temp;
            k=temp;
            
        }
        return head->next;
        
    }
};

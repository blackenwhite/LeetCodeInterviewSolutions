Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
------------------------Solution------------------
C++
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if (s.size()==0) return 0;
        if(s.size()==1) return 1;
        
        int maxim=1; int cur_length=1;
        unordered_map<char,int>chars;
        chars[s[0]]=0;
        for (int i=1;i<s.size();i++){
            if(chars.count(s[i])==0){
                chars[s[i]]=i;
                cur_length++;
                
            }else{
                int temp=chars[s[i]];
                chars.clear();
                i=temp;
                cur_length=0;
            }
           maxim=max(cur_length,maxim); 
        }
        
      return maxim;  
    }
};

------------------------Best solution------------
Two pointers:
We will use two pointers and hash table to solve this problem. We keep storing the non repeating elements in a hash table.
As soon as we encounter a repeating element we will increment the l pointer till the rpeating elements value in the hash is 0.
We simulatneously cache the maximum.
Lets assume
s = "abcabcbb"
     ^
     |
    l,r

as a value in the hash is 0 we increment r as well as the hash value   map[a] = 1
as b value in the hash is 0 we increment r as well as the hash value   map[b] = 1
as c value in the hash is 0 we increment r as well as the hash value   map[c] = 1
Now when we encounter a again we move the left pointer until hash[a] = 0.

We keep repeating the above steps and caching in the maximum value.
Here the answer is 3
//code
    int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> map;
        int l=0,r=0,ans=0;
        while(l<=r&&r<s.length())
        {
            if(map[s[r]]==0)
            {
                map[s[r]]++;
                ans=max(ans,r-l+1);
                r++;
            }
            else
            {
                map[s[l]]--;
                l++;
            }
        }
        return ans;
    }

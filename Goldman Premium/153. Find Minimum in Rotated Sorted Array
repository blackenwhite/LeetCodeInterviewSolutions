Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1

Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0

--------------------------Solution---------------------//nabajyoti majumdar
class Solution {
public:
    int helper(vector<int>&nums,int start,int end){
        if(start==end) return nums[start];
        if(end-start==1){
            return min(nums[start],nums[end]);
        }
        int mid=(start+end)/2;
        if((nums[mid-1]<nums[mid]) !=(nums[mid]<nums[mid+1])){
            return min(nums[mid],min(nums[mid-1],nums[mid+1]));
        }
        int left=helper(nums,start,mid);
        int right=helper(nums,mid+1,end);
        return min(left,right);
    }
    int findMin(vector<int>& nums) {
        if(nums.size()==1) return nums[0];
        int end=nums.size()-1;
        return helper(nums,0,end);
    }
};

In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:

Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:

Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:

Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

 

Constraints:

    The number of nodes in the tree will be between 2 and 100.
    Each node has a unique integer value from 1 to 100.

-----------------------------Solution--------------------//nabajyoti majumdar
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* find_parent(TreeNode* root,int x){
        if(root==NULL) return root;
        //if(root->left->val==x || root->right->val==x) return root;
        if(root->left!=NULL && root->left->val==x){ 
            //testing
            //cout<<"Parent of "<<x<<" found: "<<root->val<<endl;  test result: working!!!          
            return root;}
        if(root->right!=NULL && root->right->val==x) {
            //testing
           // cout<<"Parent of "<<x<<" found: "<<root->val<<endl; //test result: working
            return root;
        }
        TreeNode* l=find_parent(root->left,x);
        TreeNode* r=find_parent(root->right,x);
        if(r==NULL) return l;
        if(l==NULL) return r;
        return NULL;
    }
    
    int find_depth(TreeNode* root,int x,int depth){
        if(root==NULL) return INT_MAX;
        if(root->val==x) return depth;
        
        int l=find_depth(root->left,x,depth+1);
        int r=find_depth(root->right,x,depth+1);
        return min(l,r);
    }
    
    bool isCousins(TreeNode* root, int x, int y) {
        TreeNode* xp=find_parent(root,x);
        
        //cout<<"parent of "<<x<<" : "<<xp->val<<endl;
        
        TreeNode* yp=find_parent(root,y);
        //cout<<"parent of "<<y<<yp->val<<endl;
        int depth=0;
        int xd=find_depth(root,x,depth);
        //cout<<"x depth "<<xd<<endl;
        depth=0;
        int yd=find_depth(root,y,depth);
        //cout<<"y depth "<<yd<<endl;
        if(xp==NULL || yp==NULL) return false;
        return (xd==yd && xp!=yp);
    }
};

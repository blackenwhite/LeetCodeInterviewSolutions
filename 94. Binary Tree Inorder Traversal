Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Follow up: Recursive solution is trivial, could you do it iteratively?

------------------------Solution-----------------------//nabajyoti majumdar
//iterative
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        TreeNode* temp=root;
        stack<TreeNode*> st;
        while(temp!=NULL || !st.empty()){
            while(temp!=NULL){
                st.push(temp);
                temp=temp->left;
            }
            temp=st.top();
            ans.push_back(temp->val);
            st.pop();
            temp=temp->right;
        }
        return ans;
    }
};

